@page "/"
@using System.Globalization
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Identity
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<WorkFlow_SIG10._1.Models.Usuario> UserManager

<div class="dashboard-container">
    <header class="dashboard-header">
        <AuthorizeView>
            <Authorized>
                <h1>Bienvenido de vuelta, @firstName</h1>
            </Authorized>
            <NotAuthorized>
                <h1>Bienvenido</h1>
            </NotAuthorized>
        </AuthorizeView>
        <p>Hoy es @DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy", new CultureInfo("es-ES")).</p>
    </header>

    <section class="kpi-grid">
        <div class="kpi-card">
            <i class="fas fa-project-diagram kpi-icon" style="background-color: #8ab4f8;"></i>
            <div class="kpi-info">
                <span class="kpi-value">3</span>
                <span class="kpi-title">Proyectos Activos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-file-signature kpi-icon" style="background-color: #c58af9;"></i>
            <div class="kpi-info">
                <span class="kpi-value">12</span>
                <span class="kpi-title">Recursos Humanos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-exclamation-triangle kpi-icon" style="background-color: #fdd663;"></i>
            <div class="kpi-info">
                <span class="kpi-value">1</span>
                <span class="kpi-title">Seguridad</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-boxes kpi-icon" style="background-color: #7dd3fc;"></i>
            <div class="kpi-info">
                <span class="kpi-value">7</span>
                <span class="kpi-title">Bodega</span>
            </div>
        </div>
    </section>

    <section class="main-content-grid">
        <div class="chart-container card-style">
            <h4>Indicadores Clave de Proyecto</h4>
            <div class="chart-wrapper">
                <canvas id="indexBarChart"></canvas>
            </div>
        </div>
        <div class="activity-feed-container card-style">
            <h4>Actividad Reciente</h4>
            <ul class="activity-feed">
                @if (recentActivities != null)
                {
                    @foreach (var activity in recentActivities)
                    {
                        <li class="activity-item">
                            <i class="@activity.Icon"></i>
                            <p>@activity.Description <span>@activity.Time</span></p>
                        </li>
                    }
                }
            </ul>
        </div>
    </section>

    <section class="quick-access-container card-style">
        <h4>Accesos Directos</h4>
        <div class="quick-access-grid">
            @if (modules != null)
            {
                @foreach (var module in modules)
                {
                    <a href="@module.Url" class="quick-access-item">
                        <i class="@module.Icon"></i>
                        <span>@module.Titulo</span>
                    </a>
                }
            }
        </div>
    </section>
</div>

@code {
    private List<ModuleInfo> modules;
    private List<ActivityItem> recentActivities;
    private ChartJsData indexChartData;
    private string firstName = "Cargando...";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            if (appUser != null)
            {
                firstName = appUser.Nombre;
            }
        }

        modules = new List<ModuleInfo>
        {
            new ModuleInfo { Titulo = "Proyectos", Url = "/proyectos", Icon = "fas fa-project-diagram" },
            new ModuleInfo { Titulo = "Recursos Humanos", Url = "/contratos", Icon = "fas fa-file-signature" },
            new ModuleInfo { Titulo = "Bodega", Url = "/inventario", Icon = "fas fa-boxes" },
            new ModuleInfo { Titulo = "Seguridad", Url = "/incidencias-ssma", Icon = "fas fa-exclamation-triangle" },
            new ModuleInfo { Titulo = "Calidad", Url = "/control-calidad", Icon = "fas fa-check-circle" },
            new ModuleInfo { Titulo = "Of. Técnica", Url = "/oficina-tecnica", Icon = "fas fa-drafting-compass" }
        };

        indexChartData = new ChartJsData
        {
            Labels = new List<string> { "Avance", "HSEQ", "Costos", "Cliente" },
            Datasets = new List<ChartJsDataset>
            {
                new ChartJsDataset
                {
                    Label = "Cumplimiento",
                    Data = new List<double> { 65, 95, 75, 90 },
                    BackgroundColor = new List<string> { "#8ab4f8", "#c58af9", "#7dd3fc", "#a7d1a7" },
                    BorderColor = new List<string> { "#8ab4f8", "#c58af9", "#7dd3fc", "#a7d1a7" },
                    BorderWidth = 1
                }
            }
        };

        recentActivities = new List<ActivityItem>
        {
            new ActivityItem { Icon = "fas fa-file-alt activity-icon-docs", Description = "Se ha actualizado el documento 'PRO-001'.", Time = "hace 25 min" },
            new ActivityItem { Icon = "fas fa-user-plus activity-icon-users", Description = "Nuevo usuario 'Ana Torres' ha sido añadido.", Time = "hace 1 hora" },
            new ActivityItem { Icon = "fas fa-exclamation-triangle activity-icon-risks", Description = "Se ha reportado un nuevo incidente de seguridad.", Time = "hace 5 horas" },
            new ActivityItem { Icon = "fas fa-check-circle activity-icon-audit", Description = "Auditoría 'AUD-05' completada con éxito.", Time = "ayer" }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("blazorCharts.createBarChart", "indexBarChart", indexChartData);
        }
    }

    // Clases para el modelo de datos de Chart.js
    public class ChartJsData
    {
        [JsonPropertyName("labels")]
        public List<string> Labels { get; set; }
        [JsonPropertyName("datasets")]
        public List<ChartJsDataset> Datasets { get; set; }
    }

    public class ChartJsDataset
    {
        [JsonPropertyName("label")]
        public string Label { get; set; }
        [JsonPropertyName("data")]
        public List<double> Data { get; set; }
        [JsonPropertyName("backgroundColor")]
        public List<string> BackgroundColor { get; set; }
        [JsonPropertyName("borderColor")]
        public List<string> BorderColor { get; set; }
        [JsonPropertyName("borderWidth")]
        public int BorderWidth { get; set; }
    }

    // Clases existentes
    public class ModuleInfo
    {
        public string Titulo { get; set; }
        public string Url { get; set; }
        public string Icon { get; set; }
    }

    public class ActivityItem
    {
        public string Icon { get; set; }
        public string Description { get; set; }
        public string Time { get; set; }
    }
}