@page "/"
@using System.Globalization
@using System.Text.Json
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider

<div class="dashboard-container">
    <header class="dashboard-header">
        <AuthorizeView>
            <Authorized>
                <h1>Bienvenido de vuelta, @firstName</h1>
            </Authorized>
            <NotAuthorized>
                <h1>Bienvenido</h1>
            </NotAuthorized>
        </AuthorizeView>
        <p>Hoy es @DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy", new CultureInfo("es-ES")).</p>
    </header>

    <section class="kpi-grid">
        <div class="kpi-card">
            <i class="fas fa-project-diagram kpi-icon" style="background-color: #8ab4f8;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@activeProjectsCount</span>
                <span class="kpi-title">Proyectos Activos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-file-signature kpi-icon" style="background-color: #c58af9;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@activeContractsCount</span>
                <span class="kpi-title">Recursos Humanos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-exclamation-triangle kpi-icon" style="background-color: #fdd663;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@ssmaIncidentsCount</span>
                <span class="kpi-title">Seguridad</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-boxes kpi-icon" style="background-color: #7dd3fc;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@inventoryItemsCount</span>
                <span class="kpi-title">Bodega</span>
            </div>
        </div>
    </section>

    <section class="main-content-grid">
        <div class="chart-container card-style">
            <h4>Resumen General</h4>
            <div class="chart-wrapper">
                <canvas id="indexBarChart"></canvas>
            </div>
        </div>
        <div class="activity-feed-container card-style">
            <h4>Actividad Reciente</h4>
            @if (recentActivities == null || !recentActivities.Any())
            {
                <p>No hay actividad reciente.</p>
            }
            else
            {
                <ul class="activity-feed">
                    @foreach (var activity in recentActivities)
                    {
                        <li class="activity-item">
                            <i class="@activity.Icon"></i>
                            <p>@activity.Description <span>@activity.Time</span></p>
                        </li>
                    }
                </ul>
            }
        </div>
    </section>

    <section class="quick-access-container card-style">
        <h4>Accesos Directos</h4>
        <div class="quick-access-grid">
            @if (modules != null)
            {
                @foreach (var module in modules)
                {
                    <a href="@module.Url" class="quick-access-item">
                        <i class="@module.Icon"></i>
                        <span>@module.Titulo</span>
                    </a>
                }
            }
        </div>
    </section>
</div>

@code {
    private List<ModuleInfo> modules;
    private List<ActivityItem> recentActivities = new List<ActivityItem>();
    private ChartJsData indexChartData;
    private string firstName = "Cargando...";

    private int activeProjectsCount;
    private int activeContractsCount;
    private int ssmaIncidentsCount;
    private int inventoryItemsCount;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            using (var scope = ServiceProvider.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<Usuario>>();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                var appUser = await userManager.GetUserAsync(user);
                if (appUser != null) { firstName = appUser.Nombre; }

                activeProjectsCount = await dbContext.Proyectos.CountAsync(p => p.Estado == "Activo");
                activeContractsCount = await dbContext.Contratos.CountAsync(c => c.Estado == "Activo");
                ssmaIncidentsCount = await dbContext.IncidenciasSSMA.CountAsync();
                inventoryItemsCount = await dbContext.Inventarios.CountAsync();

                var r_proy = dbContext.Proyectos.OrderByDescending(p => p.ProyectoID).FirstOrDefault();
                if (r_proy != null) recentActivities.Add(new ActivityItem { Icon = "fas fa-project-diagram", Description = $"Nuevo proyecto: {r_proy.NombreObra}", Time = r_proy.FechaInicioProyecto.ToString("dd MMM") });

                var r_cont = dbContext.Contratos.OrderByDescending(c => c.ContratoID).FirstOrDefault();
                if (r_cont != null) recentActivities.Add(new ActivityItem { Icon = "fas fa-file-signature", Description = $"Nuevo contrato: {r_cont.TipoContrato}", Time = r_cont.FechaFirma.ToString("dd MMM") });

                var r_inci = dbContext.IncidenciasSSMA.OrderByDescending(i => i.IncidenciaID).FirstOrDefault();
                if (r_inci != null) recentActivities.Add(new ActivityItem { Icon = "fas fa-exclamation-triangle", Description = $"Nueva incidencia: {r_inci.Descripcion}", Time = r_inci.Fecha.ToString("dd MMM") });

                recentActivities = recentActivities.OrderByDescending(a => DateTime.Parse(a.Time + " " + DateTime.Now.Year, new CultureInfo("es-ES"))).ToList();
            }
        }

        modules = new List<ModuleInfo>
        {
            new ModuleInfo { Titulo = "Proyectos", Url = "/proyectos", Icon = "fas fa-project-diagram" },
            new ModuleInfo { Titulo = "Recursos Humanos", Url = "/contratos", Icon = "fas fa-file-signature" },
            new ModuleInfo { Titulo = "Bodega", Url = "/inventario", Icon = "fas fa-boxes" },
            new ModuleInfo { Titulo = "Seguridad", Url = "/incidencias-ssma", Icon = "fas fa-exclamation-triangle" },
            new ModuleInfo { Titulo = "Calidad", Url = "/control-calidad", Icon = "fas fa-check-circle" },
            new ModuleInfo { Titulo = "Of. TÃ©cnica", Url = "/oficina-tecnica", Icon = "fas fa-drafting-compass" }
        };

        indexChartData = new ChartJsData
        {
            Labels = new List<string> { "Proyectos", "Contratos", "Seguridad", "Bodega" },
            Datasets = new List<ChartJsDataset>
            {
                new ChartJsDataset
                {
                    Label = "Cantidad Total",
                    Data = new List<double?> { (double?)activeProjectsCount, (double?)activeContractsCount, (double?)ssmaIncidentsCount, (double?)inventoryItemsCount },
                    BackgroundColor = new List<string> { "#8ab4f8", "#c58af9", "#fdd663", "#7dd3fc" },
                    BorderColor = new List<string> { "#8ab4f8", "#c58af9", "#fdd663", "#7dd3fc" },
                    BorderWidth = 1
                }
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && indexChartData != null)
        {
            await JS.InvokeVoidAsync("blazorCharts.createBarChart", "indexBarChart", indexChartData);
        }
    }
}
