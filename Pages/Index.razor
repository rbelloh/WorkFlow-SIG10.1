@page "/"
@using System.Globalization
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@inject IJSRuntime JS
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager

<style>
    .notifications-list-page {
        max-height: 450px;
        overflow-y: auto;
        overflow-x: hidden; /* Solución definitiva para el scroll horizontal */
        padding-right: 5px;
    }
    .notifications-list-page .card {
        margin-bottom: 1rem;
    }

    /* Estilos para el scrollbar personalizado (WebKit) */
    .notifications-list-page::-webkit-scrollbar {
        width: 8px;
    }

    .notifications-list-page::-webkit-scrollbar-track {
        background: transparent;
    }

    .notifications-list-page::-webkit-scrollbar-thumb {
        background-color: #3a8bff;
        border-radius: 4px;
        border: 2px solid #1e1e1e;
    }

    .notifications-list-page::-webkit-scrollbar-thumb:hover {
        background-color: #5f9fff;
    }
</style>

<div class="dashboard-container">
    <header class="dashboard-header">
        <AuthorizeView>
            <Authorized>
                <h1>Bienvenido de vuelta, @firstName</h1>
            </Authorized>
            <NotAuthorized>
                <h1>Bienvenido</h1>
            </NotAuthorized>
        </AuthorizeView>
        <p>Hoy es @DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy", new CultureInfo("es-ES")).</p>
        <div>
            <button class="btn btn-info btn-sm me-2" @onclick="CreateTestNotification">Crear Notificación de Prueba</button>
            <button class="btn btn-danger btn-sm" @onclick="DeleteAllNotifications">Eliminar Notificaciones</button>
        </div>
    </header>

    <section class="kpi-grid">
        <div class="kpi-card">
            <i class="fas fa-project-diagram kpi-icon" style="background-color: #8ab4f8;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@activeProjectsCount</span>
                <span class="kpi-title">Proyectos Activos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-file-signature kpi-icon" style="background-color: #c58af9;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@activeContractsCount</span>
                <span class="kpi-title">Recursos Humanos</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-exclamation-triangle kpi-icon" style="background-color: #fdd663;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@ssmaIncidentsCount</span>
                <span class="kpi-title">Seguridad</span>
            </div>
        </div>
        <div class="kpi-card">
            <i class="fas fa-boxes kpi-icon" style="background-color: #7dd3fc;"></i>
            <div class="kpi-info">
                <span class="kpi-value">@inventoryItemsCount</span>
                <span class="kpi-title">Bodega</span>
            </div>
        </div>
    </section>

    <section class="main-content-grid">
        <div class="chart-container card-style">
            <h4>Resumen General</h4>
            <div class="chart-wrapper">
                <canvas id="indexBarChart"></canvas>
            </div>
        </div>
        <div class="activity-feed-container card-style">
            <h4>Notificaciones</h4>
            <div class="notifications-list-page">
                @if (userNotifications == null || !userNotifications.Any())
                {
                    <p class="p-3">No hay notificaciones.</p>
                }
                else
                {
                    @foreach (var notification in userNotifications)
                    {
                        <NotificationCard Notificacion="notification" OnMarkAsRead="HandleMarkAsRead" />
                    }
                }
            </div>
        </div>
    </section>

    <section class="quick-access-container card-style">
        <h4>Accesos Directos</h4>
        <div class="quick-access-grid">
            @if (modules is not null)
            {
                @foreach (var module in modules)
                {
                    var tooltipText = tooltips.GetValueOrDefault(module.Titulo);
                    @if (!string.IsNullOrEmpty(tooltipText))
                    {
                        <GlassmorphicTooltip>
                            <ChildContent>
                                <a href="@module.Url" class="quick-access-item">
                                    <i class="@module.Icon"></i>
                                    <span>@module.Titulo</span>
                                  </a>
                            </ChildContent>
                            <TooltipContent>
                                @tooltipText
                            </TooltipContent>
                        </GlassmorphicTooltip>
                    }
                    else
                    {
                        <a href="@module.Url" class="quick-access-item">
                            <i class="@module.Icon"></i>
                            <span>@module.Titulo</span>
                        </a>
                    }
                }
            }
        </div>
    </section>
</div>

@code {
    private List<ModuleInfo> modules = new();
    private ChartJsData indexChartData = new();
    private string firstName = "Cargando...";
    private int activeProjectsCount = 0;
    private int activeContractsCount = 0;
    private int ssmaIncidentsCount = 0;
    private int inventoryItemsCount = 0;
    private Dictionary<string, string> tooltips = new Dictionary<string, string>
    {
        { "Proyectos", "Gestiona todos los documentos, hitos y datos clave del contrato." },
        { "Oficina Técnica", "Accede a la planificación, control de avance y reportes técnicos del proyecto." },
        { "Calidad", "Supervisa los estándares de calidad y la conformidad de los procesos y productos." },
        { "Seguridad", "Revisa los registros de seguridad, reportes de incidentes y protocolos de prevención de riesgos." },
        { "Recursos Humanos", "Administra la información de trabajadores, licencias y registros de asistencia." },
        { "Bodega", "Controla el inventario, los movimientos de stock y las solicitudes de materiales." }
    };

    private List<Notificacion> userNotifications = new List<Notificacion>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            using (var scope = ServiceProvider.CreateScope())
            {
                var userManager = scope.ServiceProvider.GetRequiredService<UserManager<Usuario>>();
                var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

                var appUser = await userManager.GetUserAsync(user);
                if (appUser != null) { firstName = appUser.Nombre; }

                activeProjectsCount = await dbContext.Proyectos.CountAsync(p => p.Estado == "Activo");
                activeContractsCount = await dbContext.Contratos.CountAsync(c => c.Estado == "Activo");
                ssmaIncidentsCount = await dbContext.IncidenciasSSMA.CountAsync();
                inventoryItemsCount = await dbContext.Inventarios.CountAsync();

                var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (appUser != null && userIdString is not null && int.TryParse(userIdString, out var userIdInt))
                {
                    var userRoles = (await userManager.GetRolesAsync(appUser)).ToList();
                    userNotifications = await dbContext.Notificaciones
                        .Where(n => 
                            (n.UsuarioId.HasValue && n.UsuarioId.Value == userIdInt) || 
                            (n.RoleName != null && userRoles.Contains(n.RoleName)))
                        .OrderByDescending(n => n.Fecha)
                        .Distinct()
                        .ToListAsync();
                }
            }
        }

        InitializeModules();
        InitializeChartData();
    }

    private async Task HandleMarkAsRead(Notificacion notification)
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var notificationToUpdate = await dbContext.Notificaciones.FindAsync(notification.NotificacionId);
            if (notificationToUpdate != null)
            {
                notificationToUpdate.Leida = true;
                await dbContext.SaveChangesAsync();

                var localNotification = userNotifications.FirstOrDefault(n => n.NotificacionId == notification.NotificacionId);
                if(localNotification != null) 
                {
                    localNotification.Leida = true;
                    StateHasChanged();
                }
            }
        }
    }

    private void InitializeModules()
    {
        modules = new List<ModuleInfo>
        {
            new ModuleInfo { Titulo = "Proyectos", Url = "/proyectos", Icon = "fas fa-project-diagram" },
            new ModuleInfo { Titulo = "Recursos Humanos", Url = "/contratos", Icon = "fas fa-file-signature" },
            new ModuleInfo { Titulo = "Bodega", Url = "/inventario", Icon = "fas fa-boxes" },
            new ModuleInfo { Titulo = "Seguridad", Url = "/incidencias-ssma", Icon = "fas fa-exclamation-triangle" },
            new ModuleInfo { Titulo = "Calidad", Url = "/control-calidad", Icon = "fas fa-check-circle" },
            new ModuleInfo { Titulo = "Oficina Técnica", Url = "/oficina-tecnica", Icon = "fas fa-drafting-compass" }
        };
    }

    private void InitializeChartData()
    {
        indexChartData = new ChartJsData
        {
            Labels = new List<string> { "Proyectos", "Contratos", "Seguridad", "Bodega" },
            Datasets = new List<ChartJsDataset>
            {
                new ChartJsDataset
                {
                    Label = "Cantidad Total",
                    Data = new List<double?> { (double?)activeProjectsCount, (double?)activeContractsCount, (double?)ssmaIncidentsCount, (double?)inventoryItemsCount },
                    BackgroundColor = new List<string> { "#8ab4f8", "#c58af9", "#fdd663", "#7dd3fc" },
                    BorderColor = new List<string> { "#8ab4f8", "#c58af9", "#fdd663", "#7dd3fc" },
                    BorderWidth = 1
                }
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (indexChartData != null)
            {
                try
                {
                    await Task.Delay(100);
                    await JS.InvokeVoidAsync("blazorCharts.createBarChart", "indexBarChart", indexChartData);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error rendering chart: {ex.Message}");
                }
            }
        }
    }

    public async Task CreateTestNotification()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userIdString is null || !int.TryParse(userIdString, out var userIdInt))
        {
            await JS.InvokeVoidAsync("Swal.fire", "Error", "No se pudo identificar al usuario para crear la notificación.", "error");
            return;
        }

        Notificacion newNotification;
        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            newNotification = new Notificacion
            {
                Mensaje = "Esta es una <b>notificación de prueba</b> generada manualmente.",
                Fecha = DateTime.Now,
                Leida = false,
                UsuarioId = userIdInt
            };
            dbContext.Notificaciones.Add(newNotification);
            await dbContext.SaveChangesAsync();
        }
        
        userNotifications.Insert(0, newNotification);
        StateHasChanged();
        await JS.InvokeVoidAsync("Swal.fire", "Éxito", "Notificación de prueba creada.", "success");
    }

    public async Task DeleteAllNotifications()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var userIdString = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (userIdString is null || !int.TryParse(userIdString, out var userIdInt))
        {
            await JS.InvokeVoidAsync("Swal.fire", "Error", "No se pudo identificar al usuario para eliminar las notificaciones.", "error");
            return;
        }

        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var userRoles = new List<string>();
            var appUser = await scope.ServiceProvider.GetRequiredService<UserManager<Usuario>>().GetUserAsync(user);
            if (appUser != null) { userRoles = (await scope.ServiceProvider.GetRequiredService<UserManager<Usuario>>().GetRolesAsync(appUser)).ToList(); }

            var notificationsToDelete = await dbContext.Notificaciones
                .Where(n => 
                    (n.UsuarioId.HasValue && n.UsuarioId.Value == userIdInt) || 
                    (n.RoleName != null && userRoles.Contains(n.RoleName)))
                .ToListAsync();

            if (notificationsToDelete.Any())
            {
                dbContext.Notificaciones.RemoveRange(notificationsToDelete);
                await dbContext.SaveChangesAsync();
            }
        }

        userNotifications.Clear();
        StateHasChanged();
        await JS.InvokeVoidAsync("Swal.fire", "Limpiado", "Se eliminaron tus notificaciones.", "info");
    }
}
