@page "/oficina-tecnica"
@using System.Globalization
@using Microsoft.EntityFrameworkCore
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@inject IJSRuntime JS
@inject IServiceProvider ServiceProvider

<PageTitle>Oficina Técnica</PageTitle>

<div class="dashboard-container">
    <header class="dashboard-header">
        <div>
            <h1>Oficina Técnica</h1>
            <p>Control de Avance, Documentación y Planificación del Proyecto.</p>
        </div>
    </header>

    <section class="kpi-grid">
        @if (kpis != null)
        {
            @foreach (var kpi in kpis)
            {
                <div class="kpi-card">
                    <i class="@kpi.Icon kpi-icon" style="background-color: @kpi.Color;"></i>
                    <div class="kpi-info">
                        <span class="kpi-value">@kpi.Value</span>
                        <span class="kpi-title">@kpi.Title</span>
                    </div>
                </div>
            }
        }
    </section>

    <section class="main-content-grid">
        <div class="chart-container card-style">
            <h4>Documentos por Proyecto</h4>
            <div class="chart-wrapper">
                <canvas id="docsPerProjectChart"></canvas>
            </div>
        </div>
        <div class="activity-feed-container card-style">
            <h4>Actividad Reciente de O.T.</h4>
            @if (recentTechActivities == null || !recentTechActivities.Any())
            {
                <p>No hay actividad reciente.</p>
            }
            else
            {
                <ul class="activity-feed">
                    @foreach (var activity in recentTechActivities)
                    {
                        <li class="activity-item">
                            <i class="@activity.Icon"></i>
                            <p>@activity.Description <span>@activity.Time</span></p>
                        </li>
                    }
                </ul>
            }
        </div>
    </section>

    <section class="quick-access-container card-style">
        <h4>Accesos Directos de Oficina Técnica</h4>
        <div class="quick-access-grid">
            @if (techModules != null)
            {
                @foreach (var module in techModules)
                {
                    <a href="@module.Url" class="quick-access-item">
                        <i class="@module.Icon"></i>
                        <span>@module.Titulo</span>
                    </a>
                }
            }
        </div>
    </section>
</div>

@code {
    private List<ModuleInfo> techModules = new();
    private List<ActivityItem> recentTechActivities = new List<ActivityItem>();
    private List<KpiInfo> kpis = new List<KpiInfo>();
    private ChartJsData docsPerProjectChartData = new();

    // Se eliminó el OnInitialized vacío y obsoleto.

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceProvider.CreateScope())
        {
            var dbContext = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // La lógica de los KPIs se mantiene igual por ahora.
            var totalDocs = await dbContext.OficinasTecnicas.CountAsync();
            var recentDocs = await dbContext.OficinasTecnicas.CountAsync(d => d.FechaSubida >= DateTime.Today.AddMonths(-1));
            var projectsWithDocs = await dbContext.OficinasTecnicas.Select(d => d.ProyectoID).Distinct().CountAsync();
            double docsPerProject = 0;
            if (projectsWithDocs > 0)
            {
                docsPerProject = (double)totalDocs / projectsWithDocs;
            }

            kpis = new List<KpiInfo>
            {
                new KpiInfo { Value = totalDocs.ToString(), Title = "Total Documentos", Icon = "fas fa-file-alt", Color = "#8ab4f8" },
                new KpiInfo { Value = recentDocs.ToString(), Title = "Documentos Recientes (30d)", Icon = "fas fa-file-upload", Color = "#c58af9" },
                new KpiInfo { Value = projectsWithDocs.ToString(), Title = "Proyectos con Documentos", Icon = "fas fa-project-diagram", Color = "#fdd663" },
                new KpiInfo { Value = docsPerProject.ToString("F1"), Title = "Promedio Docs/Proyecto", Icon = "fas fa-divide", Color = "#7dd3fc" }
            };

            // --- LÓGICA ACTUALIZADA PARA ACTIVIDAD RECIENTE ---
            var notificaciones = await dbContext.Notificaciones
                .Where(n => n.RoleName == "OficinaTecnica") // Filtro por Rol
                .OrderByDescending(n => n.Fecha)
                .Take(10) // Tomar las 10 más recientes
                .ToListAsync();

            recentTechActivities = notificaciones.Select(n => new ActivityItem
            {
                Icon = "fas fa-info-circle", // Icono genérico para notificaciones
                Description = n.Mensaje,
                Time = n.Fecha.ToString("dd MMM", new CultureInfo("es-ES"))
            }).ToList();


            var docsPerProjectData = await dbContext.OficinasTecnicas
                .Where(d => d.Proyecto != null) // Add this line to filter out null Proyecto
                .GroupBy(d => d.Proyecto!.NombreObra)
                .Select(g => new { ProjectName = g.Key, Count = g.Count() })
                .ToListAsync();

            docsPerProjectChartData = new ChartJsData
            {
                Labels = docsPerProjectData.Select(d => d.ProjectName ?? "Sin Nombre").ToList(),
                Datasets = new List<ChartJsDataset>
                {
                    new ChartJsDataset
                    {
                        Label = "Nº de Documentos",
                        Data = docsPerProjectData.Select(d => (double?)d.Count).ToList(),
                        BackgroundColor = new List<string> { "#8ab4f8", "#c58af9", "#fdd663", "#7dd3fc", "#a7d1a7" },
                        BorderWidth = 1
                    }
                }
            };

            techModules = new List<ModuleInfo>
            {
                new ModuleInfo { Titulo = "Control de Proyecto", Url = "/oficina-tecnica/control-proyectos", Icon = "fas fa-tasks" },
                new ModuleInfo { Titulo = "Control de Planos", Url = "/oficina-tecnica/planos", Icon = "fas fa-map" },
                new ModuleInfo { Titulo = "Especificaciones Téc.", Url = "/oficina-tecnica/especificaciones", Icon = "fas fa-ruler-combined" },
                new ModuleInfo { Titulo = "Solicitudes de Info (RFI)", Url = "/oficina-tecnica/rfi", Icon = "fas fa-question-circle" },
                new ModuleInfo { Titulo = "Estados de Pago", Url = "/oficina-tecnica/pagos", Icon = "fas fa-file-invoice-dollar" },
                new ModuleInfo { Titulo = "Informes de Avance", Url = "/oficina-tecnica/informes", Icon = "fas fa-chart-line" },
                new ModuleInfo { Titulo = "Control de Protocolos", Url = "/oficina-tecnica/protocolos", Icon = "fas fa-clipboard-check" },
                new ModuleInfo { Titulo = "Libro de Obras Digital", Url = "/oficina-tecnica/libro-obras", Icon = "fas fa-book-open" },
                new ModuleInfo { Titulo = "Gestión de Subcontratos", Url = "/oficina-tecnica/subcontratos", Icon = "fas fa-users-cog" }
            };
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && docsPerProjectChartData != null)
        {
            await JS.InvokeVoidAsync("blazorCharts.createBarChart", "docsPerProjectChart", docsPerProjectChartData);
        }
    }

    }