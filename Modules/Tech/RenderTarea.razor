@using WorkFlow_SIG10._1.Models
@using System.Globalization

<tr @onclick="TareaClicked" class="@(Tarea.EsResumen ? "table-secondary" : "")">
    <td class="fw-semibold">
        <span style="padding-left: @(Nivel * 20)px;"></span>
        @Tarea.WBS
    </td>
    <td class="fw-semibold">
        @Tarea.Nombre
    </td>
    <td>
        <span>
            @if (ShowRealProgress)
            {
                <span>@(Tarea.DuracionReal ?? 0) días</span>
            }
            else
            {
                <span>@((Tarea.FechaFin - Tarea.FechaInicio).TotalDays + 1) días</span>
            }
        </span>
    </td>
    <td>
        <span>
            @if (ShowRealProgress)
            {
                <span>@(Tarea.FechaInicioReal?.ToShortDateString())</span>
            }
            else
            {
                <span>@Tarea.FechaInicio.ToShortDateString()</span>
            }
        </span>
    </td>
    <td>
        <span>
            @if (ShowRealProgress)
            {
                <span>@(Tarea.FechaFinReal?.ToShortDateString())</span>
            }
            else
            {
                <span>@Tarea.FechaFin.ToShortDateString()</span>
            }
        </span>
    </td>
    @if (ShowRealProgress)
    {
        <td>
            @if (Tarea.EsResumen)
            {
                <span>@(Tarea.PorcentajeCompletadoReal ?? 0)%</span>
            }
            else
            {
                <div class="progress" style="height: 20px; background-color: var(--gemini-surface-2); font-size: 0.75rem;">
                    <div class="progress-bar" role="progressbar" style="width: @(Tarea.PorcentajeCompletadoReal ?? 0)%;" aria-valuenow="@(Tarea.PorcentajeCompletadoReal ?? 0)" aria-valuemin="0" aria-valuemax="100">@(Tarea.PorcentajeCompletadoReal ?? 0)%</div>
                </div>
            }
        </td>
        <td>
            <span class="badge @GetEstadoTareaBadgeClass()">@GetEstadoTarea()</span>
        </td>
    }
</tr>

@code {
    [Parameter]
    public Tarea Tarea { get; set; }

    [Parameter]
    public int Nivel { get; set; }

    [Parameter]
    public bool ShowRealProgress { get; set; }

    [Parameter]
    public EventCallback<Tarea> OnTareaClick { get; set; }

    private async Task TareaClicked()
    {
        // Solo permite el click si no es tarea resumen Y se está en la vista de Avance Real
        if (!Tarea.EsResumen && ShowRealProgress)
        {
            await OnTareaClick.InvokeAsync(Tarea);
        }
    }

    private string GetEstadoTarea()
    {
        if ((Tarea.PorcentajeCompletadoReal ?? 0) == 100)
        {
            return "Finalizada";
        }

        var hoy = DateTime.Today;
        var fechaInicio = Tarea.FechaInicioReal ?? Tarea.FechaInicio;
        var fechaFin = Tarea.FechaFinReal ?? Tarea.FechaFin;

        if (fechaFin < hoy && (Tarea.PorcentajeCompletadoReal ?? 0) < 100)
        {
            return "Retrasada";
        }
        if (fechaInicio <= hoy && fechaFin >= hoy)
        {
            return "En Ejecución";
        }
        if (fechaInicio > hoy)
        {
            return "Por Ejecutar";
        }
        return "Indefinido"; // Fallback for any other case
    }

    private string GetEstadoTareaBadgeClass()
    {
        var estado = GetEstadoTarea();
        return estado switch
        {
            "Finalizada" => "bg-success",
            "Retrasada" => "bg-danger",
            "En Ejecución" => "bg-primary",
            "Por Ejecutar" => "bg-secondary",
            _ => "bg-light text-dark"
        };
    }
}