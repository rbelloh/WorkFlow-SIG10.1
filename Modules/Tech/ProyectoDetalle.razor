@page "/oficina-tecnica/{ProyectoId:int}"
@using System.Globalization
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@using WorkFlow_SIG10._1.Modules.Tech
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject WorkFlow_SIG10._1.Services.TaskUpdateService TaskUpdateService
@inject WorkFlow_SIG10._1.Services.TaskAggregationService TaskAggregationService

<PageTitle>Detalle de Proyecto: @(proyecto?.NombreObra ?? "Cargando...")</PageTitle>

@if (proyecto == null)
{
    <p><em>Cargando proyecto o no se encontró el proyecto con ID @ProyectoId...</em></p>
}
else
{
    <div>
        <h3>@proyecto.NombreObra</h3>
        <p><strong>Código:</strong> @proyecto.CodigoObra | <strong>Estado:</strong> @proyecto.Estado</p>
        <hr />

        <section class="kpi-grid mb-4">
            <div class="kpi-card">
                <i class="fas fa-tasks kpi-icon" style="background-color: #8ab4f8;"></i>
                <div class="kpi-info">
                    <span class="kpi-value">@avanceRealGeneral%</span>
                    <span class="kpi-title">Avance Real General</span>
                </div>
            </div>
            <div class="kpi-card">
                <i class="fas fa-chart-line kpi-icon" style="background-color: #a7d1a7;"></i>
                <div class="kpi-info">
                    <span class="kpi-value">@avanceProyectadoGeneral%</span>
                    <span class="kpi-title">Avance Proyectado General</span>
                </div>
            </div>
            <div class="kpi-card">
                <i class="fas fa-exclamation-triangle kpi-icon" style="background-color: #fdd663;"></i>
                <div class="kpi-info">
                    <span class="kpi-value">@tareasAtrasadas</span>
                    <span class="kpi-title">Tareas Atrasadas</span>
                </div>
            </div>
            <div class="kpi-card">
                <i class="far fa-calendar-alt kpi-icon" style="background-color: #c58af9;"></i>
                <div class="kpi-info">
                    <span class="kpi-value">@diasRestantes</span>
                    <span class="kpi-title">Días Restantes (Plan)</span>
                </div>
            </div>
        </section>

        <div class="d-flex justify-content-between align-items-center mb-3">
            <label for="filter" class="switch" aria-label="Toggle Filter">
                <input type="checkbox" id="filter" @bind="showRealProgress" />
                <span>Avance Proyectado</span>
                <span>Avance Real</span>
            </label>
            <div class="flex-grow-1 mx-3">
                <input type="text" class="form-control" placeholder="Buscar tarea por nombre o WBS..." @bind="SearchTerm" @bind:event="oninput" />
            </div>
            @if (showRealProgress)
            {
                <button type="button" class="btn btn-success" @onclick="GuardarCambios">
                    <i class="fas fa-save"></i> Guardar Cambar
                </button>
            }
        </div>

        <div class="table-responsive">
            <table class="table table-modern">
                <thead class="table-light">
                    <tr>
                        <th class="text-start">ID Tarea</th>
                        <th class="text-start">Nombre Tarea</th>
                        <th class="text-start">Duración (en días)</th>
                        <th class="text-start">Comienzo</th>
                        <th class="text-start">Fin</th>
                        @if (showRealProgress)
                        {
                            <th class="text-start">% Avance</th>
                            <th class="text-start">Estado</th>
                        }
                    </tr>
                </thead>
                <tbody class="table-group-divider">
                    @foreach (var tarea in TareasParaRenderizar)
                    {
                        <RenderTarea Tarea="tarea" Nivel="@(tarea.WBS.Count(c => c == '.'))" ShowRealProgress="showRealProgress" OnTareaClick="SeleccionarTarea" />

                        @if (tareaSeleccionada != null && tareaSeleccionada.TareaId == tarea.TareaId)
                        {
                            <tr>
                                <td colspan="@(showRealProgress ? 7 : 5)" class="p-0">
                                    <TareaDetallePanel Tarea="tareaSeleccionada" OnClose="OnPanelClose" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    [Parameter]
    public int ProyectoId { get; set; }

    private Proyecto? proyecto;
    private List<Tarea> TareasNivelSuperior = new List<Tarea>();
    private Tarea? tareaSeleccionada;

    // --- Vista de progreso ---
    private bool showRealProgress = true;

    // --- KPIs ---
    private int avanceRealGeneral = 0;
    private int avanceProyectadoGeneral = 0;
    private int tareasAtrasadas = 0;
    private int diasRestantes = 0;

    // --- Búsqueda y Filtro ---
    private string SearchTerm { get; set; } = "";

    // Propiedad que devuelve la lista final de tareas a renderizar (filtrada y aplanada)
    public List<Tarea> TareasParaRenderizar
    {
        get
        {
            var filteredHierarchy = GetFilteredHierarchy();
            return FlattenTareasForDisplay(filteredHierarchy);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await CargarDatosProyecto();
        TaskUpdateService.OnTaskDataChanged += HandleTaskDataChanged;
    }

    public void Dispose()
    {
        TaskUpdateService.OnTaskDataChanged -= HandleTaskDataChanged;
    }

    private async void HandleTaskDataChanged()
    {
        await CargarDatosProyecto();
        StateHasChanged();
    }

    private async Task CargarDatosProyecto()
    {
        using var context = DbFactory.CreateDbContext();
        proyecto = await context.Proyectos.AsNoTracking()
            .FirstOrDefaultAsync(p => p.ProyectoID == ProyectoId);

        if (proyecto != null)
        {
            var todasLasTareas = await context.Tareas.AsNoTracking()
                .Where(t => t.ProyectoId == ProyectoId)
                .OrderBy(t => t.WBS)
                .ToListAsync();

            TareasNivelSuperior.Clear();

            if (todasLasTareas.Any())
            {
                var tareasDeTrabajo = todasLasTareas.Where(t => !t.EsResumen).ToList();
                if (tareasDeTrabajo.Any())
                {
                    avanceRealGeneral = (int)tareasDeTrabajo.Average(t => t.PorcentajeCompletadoReal ?? 0);
                    var totalProjectDuration = (proyecto.FechaTerminoProyecto - proyecto.FechaInicioProyecto).TotalDays;
                    var elapsedProjectDuration = (DateTime.Today - proyecto.FechaInicioProyecto).TotalDays;
                    if (totalProjectDuration > 0) { avanceProyectadoGeneral = (int)Math.Clamp((elapsedProjectDuration / totalProjectDuration) * 100, 0, 100); }
                    else { avanceProyectadoGeneral = 0; }
                    tareasAtrasadas = tareasDeTrabajo.Count(t => (t.FechaFin < DateTime.Today && (t.PorcentajeCompletadoReal ?? 0) < 100) || (t.FechaInicio <= DateTime.Today && (t.PorcentajeCompletadoReal ?? 0) < 100 && t.FechaFin >= DateTime.Today));
                }
                diasRestantes = proyecto.FechaTerminoProyecto > DateTime.Today ? (proyecto.FechaTerminoProyecto - DateTime.Today).Days : 0;

                var tareasMap = todasLasTareas.ToDictionary(t => t.TareaId);
                foreach (var tarea in todasLasTareas)
                {
                    if (!tarea.FechaInicioReal.HasValue) { tarea.FechaInicioReal = tarea.FechaInicio; }
                    if (!tarea.FechaFinReal.HasValue) { tarea.FechaFinReal = tarea.FechaFin; }
                    if (!tarea.DuracionReal.HasValue) { tarea.DuracionReal = (int)((tarea.FechaFin - tarea.FechaInicio).TotalDays + 1); }
                    if (!tarea.PorcentajeCompletadoReal.HasValue) { tarea.PorcentajeCompletadoReal = 0; }

                    tarea.Subtareas.Clear();
                    if (tarea.TareaPadreId.HasValue && tareasMap.TryGetValue(tarea.TareaPadreId.Value, out var padre))
                    {
                        padre.Subtareas.Add(tarea);
                        tarea.TareaPadre = padre;
                    }
                    else
                    {
                        TareasNivelSuperior.Add(tarea);
                    }
                }
            }
        }
    }

    // Devuelve la jerarquía de tareas filtrada
    private List<Tarea> GetFilteredHierarchy()
    {
        if (string.IsNullOrWhiteSpace(SearchTerm))
        {
            return TareasNivelSuperior;
        }
        return FilterTareas(TareasNivelSuperior, SearchTerm.ToLowerInvariant());
    }

    // Método recursivo que filtra la jerarquía
    private List<Tarea> FilterTareas(List<Tarea> tareas, string term)
    {
        var filteredList = new List<Tarea>();
        foreach (var tarea in tareas)
        {
            var filteredSubtareas = FilterTareas(new List<Tarea>(tarea.Subtareas), term);
            bool selfMatches = tarea.Nombre.ToLowerInvariant().Contains(term) || tarea.WBS.ToLowerInvariant().Contains(term);

            if (selfMatches || filteredSubtareas.Any())
            {
                var newTarea = tarea.ShallowCopy();
                newTarea.Subtareas = filteredSubtareas;
                filteredList.Add(newTarea);
            }
        }
        return filteredList;
    }

    // Método recursivo que aplana la jerarquía para el renderizado
    private List<Tarea> FlattenTareasForDisplay(List<Tarea> tareas)
    {
        var flatList = new List<Tarea>();
        foreach (var tarea in tareas)
        {
            flatList.Add(tarea);
            if (tarea.Subtareas != null && tarea.Subtareas.Any())
            {
                flatList.AddRange(FlattenTareasForDisplay(new List<Tarea>(tarea.Subtareas)));
            }
        }
        return flatList;
    }

    private void SeleccionarTarea(Tarea tarea)
    {
        if (tareaSeleccionada != null && tareaSeleccionada.TareaId == tarea.TareaId)
        {
            tareaSeleccionada = null;
        }
        else
        {
            tareaSeleccionada = tarea;
        }
        StateHasChanged();
    }

    private async Task OnPanelClose(bool seGuardo)
    {
        if (seGuardo)
        {
            await CargarDatosProyecto();
            showRealProgress = true; // Automatically switch to Real Progress view after saving
        }
        tareaSeleccionada = null;
        StateHasChanged();
    }

    private async Task GuardarCambios()
    {
        using var context = DbFactory.CreateDbContext();
        var todasLasTareasDelProyecto = TareasNivelSuperior.SelectMany(t => t.Subtareas).ToList();
        todasLasTareasDelProyecto.AddRange(TareasNivelSuperior);

        foreach (var tarea in todasLasTareasDelProyecto)
        {
            var tareaEnDb = await context.Tareas.FindAsync(tarea.TareaId);
            if (tareaEnDb != null && !tarea.EsResumen)
            {
                tareaEnDb.FechaInicioReal = tarea.FechaInicioReal;
                tareaEnDb.FechaFinReal = tarea.FechaFinReal;
                tareaEnDb.DuracionReal = tarea.DuracionReal;
                tareaEnDb.PorcentajeCompletadoReal = tarea.PorcentajeCompletadoReal;
                tareaEnDb.Notas = tarea.Notas;
            }
        }
        await context.SaveChangesAsync();

        var todasLasTareasActualizadas = await context.Tareas.Where(t => t.ProyectoId == ProyectoId).ToListAsync();
        TaskAggregationService.CalculateSummaryTasks(todasLasTareasActualizadas);

        foreach (var tarea in todasLasTareasActualizadas.Where(t => t.EsResumen))
        {
            var tareaEnDb = await context.Tareas.FindAsync(tarea.TareaId);
            if (tareaEnDb != null)
            {
                tareaEnDb.FechaInicioReal = tarea.FechaInicioReal;
                tareaEnDb.FechaFinReal = tarea.FechaFinReal;
                tareaEnDb.DuracionReal = tarea.DuracionReal;
                tareaEnDb.PorcentajeCompletadoReal = tarea.PorcentajeCompletadoReal;
            }
        }
        await context.SaveChangesAsync();

        await CargarDatosProyecto();
        StateHasChanged();
    }

    private async Task GuardarTareaYSubtareas(Tarea tarea, ApplicationDbContext context)
    {
        var tareaEnDb = await context.Tareas.FindAsync(tarea.TareaId);
        if (tareaEnDb != null)
        {
            tareaEnDb.FechaInicio = tarea.FechaInicio;
            tareaEnDb.FechaFin = tarea.FechaFin;
            tareaEnDb.DuracionReal = tarea.DuracionReal;
            tareaEnDb.FechaInicioReal = tarea.FechaInicioReal;
            tareaEnDb.FechaFinReal = tarea.FechaFinReal;
            tareaEnDb.PorcentajeCompletadoReal = tarea.PorcentajeCompletadoReal;
            tareaEnDb.EstadoAccion = tarea.EstadoAccion;
            tareaEnDb.Notas = tarea.Notas;
        }

        foreach (var subtarea in tarea.Subtareas)
        {
            await GuardarTareaYSubtareas(subtarea, context);
        }
    }
}