@using WorkFlow_SIG10._1.Models

<style>
    /*
      Estilos encapsulados para este componente.
      El '!important' es crucial aquí para sobreescribir los estilos de la tabla
      definidos globalmente en site-aursig.css, que también usan '!important'.
      Como estas reglas son más específicas (ej: 'tr.summary-level-0 > td'),
      ganan la batalla de la especificidad y se aplican correctamente.
    */
    .wbs-column {
        font-weight: bold;
        font-family: 'Courier New', Courier, monospace;
        font-size: 0.9em;
    }

    tr.summary-level-0 > td {
        background-color: rgba(46, 139, 87, 0.3) !important;
        font-weight: bold;
    }

    tr.summary-level-1 > td {
        background-color: rgba(218, 165, 32, 0.3) !important;
        font-weight: bold;
    }

    tr.summary-level-deep > td {
        background-color: rgba(70, 130, 180, 0.2) !important;
        font-weight: bold;
    }
</style>

@if (Tarea != null)
{
    <tr class="@GetRowClass()">
        
        <td class="wbs-column">@Tarea.WBS</td>

        <td>
            <span style="padding-left: @(Nivel * 20)px;"></span>
            @Tarea.Nombre
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <select class="form-control form-control-sm" @bind="Tarea.Unidad" @bind:after="NotifyChange">
                    <option value="">Seleccionar</option>
                    <option value="GL">Global (GL)</option>
                    <option value="ML">Metro Lineal (ML)</option>
                    <option value="M2">Metro Cuadrado (M2)</option>
                    <option value="M3">Metro Cúbico (M3)</option>
                    <option value="KG">Kilogramo (KG)</option>
                    <option value="TN">Tonelada (TN)</option>
                    <option value="UN">Unidad (UN)</option>
                </select>
            }
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <input type="number" class="form-control form-control-sm" 
                       @bind-value="Tarea.CantidadContrato" @bind-value:after="NotifyChange" />
            }
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <input type="number" class="form-control form-control-sm" 
                       @bind-value="Tarea.PrecioUnitario" @bind-value:after="NotifyChange" />
            }
        </td>

        <td>
            @Tarea.ImporteContrato.ToString("C")
        </td>

        <td></td>
    </tr>
}

@code {
    [Parameter]
    public Tarea? Tarea { get; set; }

    [Parameter]
    public int Nivel { get; set; }

    [Parameter]
    public EventCallback<Tarea> OnChange { get; set; }

    private string GetRowClass()
    {
        if (Tarea == null || !Tarea.EsResumen) return "";
        return Nivel switch
        {
            0 => "summary-level-0",
            1 => "summary-level-1",
            _ => "summary-level-deep"
        };
    }

    private async Task NotifyChange()
    {
        if (Tarea != null && !Tarea.EsResumen)
        {
            Tarea.ImporteContrato = Tarea.CantidadContrato * Tarea.PrecioUnitario;
            await OnChange.InvokeAsync(Tarea);
        }
    }
}