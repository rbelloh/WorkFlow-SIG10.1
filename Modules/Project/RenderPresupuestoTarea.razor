@using WorkFlow_SIG10._1.Models
@using WorkFlow_SIG10._1.Utilities
@using System.Globalization

@if (Tarea != null)
{
    <tr class="@GetRowClass()">
        
        <td class="wbs-column">@Tarea.WBS</td>

        <td>
            <span style="padding-left: @(Nivel * 20)px;"></span>
            @Tarea.Nombre
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <select class="form-control form-control-sm" @bind="Tarea.Unidad" @bind:after="NotifyChange">
                    <option value="">Seleccionar</option>
                    <option value="GL">Global (GL)</option>
                    <option value="ML">Metro Lineal (ML)</option>
                    <option value="M2">Metro Cuadrado (M2)</option>
                    <option value="M3">Metro CÃºbico (M3)</option>
                    <option value="KG">Kilogramo (KG)</option>
                    <option value="TN">Tonelada (TN)</option>
                    <option value="UN">Unidad (UN)</option>
                </select>
            }
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <input type="text" class="form-control form-control-sm text-end" 
                       @bind="CantidadContratoText" @bind:after="NotifyChange" />
            }
        </td>

        <td>
            @if (Tarea.EsResumen)
            {
                <span></span>
            }
            else
            {
                <input type="text" class="form-control form-control-sm text-end" 
                       @bind="PrecioUnitarioText" @bind:after="NotifyChange" />
            }
        </td>

        <td class="text-end">
            @FormatUtils.FormatCurrency(Tarea.ImporteContrato)
        </td>

        <td></td>
    </tr>
}

@code {
    [Parameter]
    public Tarea? Tarea { get; set; }

    [Parameter]
    public int Nivel { get; set; }

    [Parameter]
    public EventCallback<Tarea> OnChange { get; set; }

    // Culture for parsing user input that matches our custom format.
    private static readonly CultureInfo parsingCulture = new CultureInfo("es-CL") { 
        NumberFormat = { 
            CurrencySymbol = "$", CurrencyGroupSeparator = ".", CurrencyDecimalSeparator = ",",
            NumberGroupSeparator = ".", NumberDecimalSeparator = "," 
        }
    };
    
    public string CantidadContratoText
    {
        get => Tarea != null ? FormatUtils.FormatNumber(Tarea.CantidadContrato, 2) : "0";
        set
        {
            if (Tarea != null && decimal.TryParse(value, NumberStyles.Any, parsingCulture, out decimal parsedValue))
            {
                Tarea.CantidadContrato = parsedValue;
            }
        }
    }

    public string PrecioUnitarioText
    {
        get => Tarea != null ? FormatUtils.FormatCurrency(Tarea.PrecioUnitario) : "$ 0,00";
        set
        {
            // Use NumberStyles.Currency to correctly parse values with or without the currency symbol.
            if (Tarea != null && decimal.TryParse(value, NumberStyles.Currency, parsingCulture, out decimal parsedValue))
            {
                Tarea.PrecioUnitario = parsedValue;
            }
        }
    }

    private string GetRowClass()
    {
        if (Tarea == null || !Tarea.EsResumen) return "";
        return Nivel switch
        {
            0 => "summary-level-0",
            1 => "summary-level-1",
            _ => "summary-level-deep"
        };
    }

    private async Task NotifyChange()
    {
        if (Tarea != null && !Tarea.EsResumen)
        {
            Tarea.ImporteContrato = Tarea.CantidadContrato * Tarea.PrecioUnitario;
            await OnChange.InvokeAsync(Tarea);
        }
    }
}
