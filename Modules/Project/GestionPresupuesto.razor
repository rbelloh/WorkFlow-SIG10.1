@page "/proyectos/gestion-presupuesto"
@page "/proyectos/gestion-presupuesto/{ProjectId:int}"

@using Microsoft.EntityFrameworkCore
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@using WorkFlow_SIG10._1.Modules.Project

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Gestión de Presupuesto</PageTitle>

<h3>Gestión de Presupuesto</h3>

@if (selectedProjectId == null)
{
    <p>Seleccione un proyecto para ver su presupuesto.</p>
    <div class="card card-style">
        <div class="card-body">
            @if (!allProjects.Any()) { <p><em>Cargando proyectos...</em></p> }
            else
            {
                <div class="list-group">
                    @foreach (var p in allProjects)
                    {
                        <a @onclick="() => NavigateToProject(p.ProyectoID)" @onclick:preventDefault style="cursor: pointer;" class="list-group-item list-group-item-action">
                            <h5 class="mb-1">@p.NombreObra</h5><small>@p.Estado</small>
                        </a>
                    }
                </div>
            }
        </div>
    </div>
}
else if (proyecto == null)
{
    <p><em>Cargando presupuesto...</em></p>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h4>Presupuesto para: @proyecto.NombreObra</h4>
        <button class="btn btn-success" @onclick="GuardarCambios" disabled="@(!cambiosPendientes.Any())">
            <span class="oi oi-hard-drive" aria-hidden="true"></span> Guardar Cambios
        </button>
    </div>

    <div class="card card-style">
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover">
                    <thead class="thead-light">
                        <tr>
                            <th class="wbs-column">WBS</th>
                            <th>Nombre Tarea</th>
                            <th>Unidad</th>
                            <th>Cantidad</th>
                            <th>Precio Unitario</th>
                            <th>Importe Contrato</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var tarea in TareasParaRenderizar)
                        {
                            <RenderPresupuestoTarea Tarea="tarea" 
                                                  Nivel="@(tarea.WBS.Count(c => c == '.'))" 
                                                  OnChange="MarcarComoCambiado" />
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int? ProjectId { get; set; }

    private int? selectedProjectId;
    private List<Proyecto> allProjects = new();
    private Proyecto? proyecto;
    private List<Tarea> TareasNivelSuperior = new();
    private Dictionary<int, Tarea> todasLasTareasMap = new();
    private HashSet<Tarea> cambiosPendientes = new();

    private List<Tarea> TareasParaRenderizar => FlattenTareasForDisplay(TareasNivelSuperior);

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        allProjects = await context.Proyectos.AsNoTracking().ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ProjectId.HasValue && selectedProjectId != ProjectId.Value)
        {
            selectedProjectId = ProjectId.Value;
            await CargarDatosProyecto();
        }
        else if (!ProjectId.HasValue)
        {
            selectedProjectId = null;
            proyecto = null;
            TareasNivelSuperior.Clear();
            todasLasTareasMap.Clear();
            cambiosPendientes.Clear();
        }
    }

    private async Task CargarDatosProyecto()
    {
        cambiosPendientes.Clear();
        using var context = DbFactory.CreateDbContext();
        proyecto = await context.Proyectos.AsNoTracking().FirstOrDefaultAsync(p => p.ProyectoID == selectedProjectId);

        if (proyecto != null)
        {
            var todasLasTareas = await context.Tareas.AsNoTracking()
                .Where(t => t.ProyectoId == selectedProjectId)
                .OrderBy(t => t.WBS)
                .ToListAsync();
            
            todasLasTareasMap = todasLasTareas.ToDictionary(t => t.TareaId);
            TareasNivelSuperior.Clear();

            foreach (var tarea in todasLasTareas)
            {
                tarea.Subtareas.Clear();
                if (tarea.TareaPadreId.HasValue && todasLasTareasMap.TryGetValue(tarea.TareaPadreId.Value, out var padre))
                {
                    padre.Subtareas.Add(tarea);
                }
                // Excluimos la tarea raíz del proyecto (WBS "0" o sin padre y UidMsProject 0)
                else if (tarea.WBS != "0" && tarea.UidMsProject != 0)
                {
                    TareasNivelSuperior.Add(tarea);
                }
            }
        }
        StateHasChanged();
    }

    private List<Tarea> FlattenTareasForDisplay(List<Tarea> tareas)
    {
        var flatList = new List<Tarea>();
        foreach (var tarea in tareas.OrderBy(t => t.WBS))
        {
            flatList.Add(tarea);
            if (tarea.Subtareas.Any())
            {
                flatList.AddRange(FlattenTareasForDisplay(new List<Tarea>(tarea.Subtareas)));
            }
        }
        return flatList;
    }

    private void MarcarComoCambiado(Tarea tareaModificada)
    {
        cambiosPendientes.Add(tareaModificada);

        // Recalcular el padre de la tarea modificada
        if (tareaModificada.TareaPadreId.HasValue && todasLasTareasMap.TryGetValue(tareaModificada.TareaPadreId.Value, out var padre))
        {
            RecalcularResumen(padre);
        }
        StateHasChanged(); // Forzar actualización de UI para habilitar el botón
    }

    private void RecalcularResumen(Tarea tareaResumen)
    {
        tareaResumen.ImporteContrato = tareaResumen.Subtareas.Sum(t => t.ImporteContrato);
        cambiosPendientes.Add(tareaResumen); // Marcar el resumen también como modificado

        // Propagar el cambio hacia arriba
        if (tareaResumen.TareaPadreId.HasValue && todasLasTareasMap.TryGetValue(tareaResumen.TareaPadreId.Value, out var abuelo))
        {
            RecalcularResumen(abuelo);
        }
    }

    private async Task GuardarCambios()
    {
        if (!cambiosPendientes.Any()) return;

        using var context = DbFactory.CreateDbContext();
        
        foreach (var tareaModificada in cambiosPendientes)
        {
            context.Tareas.Attach(tareaModificada);
            context.Entry(tareaModificada).Property(x => x.ImporteContrato).IsModified = true;

            // Solo marcamos como modificadas las propiedades de las tareas de detalle
            if (!tareaModificada.EsResumen)
            {
                context.Entry(tareaModificada).Property(x => x.Unidad).IsModified = true;
                context.Entry(tareaModificada).Property(x => x.CantidadContrato).IsModified = true;
                context.Entry(tareaModificada).Property(x => x.PrecioUnitario).IsModified = true;
            }
        }

        await context.SaveChangesAsync();
        cambiosPendientes.Clear();
        StateHasChanged(); // Para deshabilitar el botón de guardar
    }

    private void NavigateToProject(int projectId)
    {
        NavigationManager.NavigateTo($"/proyectos/gestion-presupuesto/{projectId}");
    }
}
