@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.DependencyInjection
@using WorkFlow_SIG10._1.Models
@inject IJSRuntime JSRuntime

<div class="nav-container">
    <div class="nav-scrollable">

        <AuthorizeView>
            <Authorized>
                <div class="user-profile">
                    <div class="user-icon">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="user-name">
                        <span>@firstName</span>
                    </div>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="user-profile">
                    <div class="user-icon">
                        <i class="fas fa-user"></i>
                    </div>
                    <div class="user-name">
                        <span>Invitado</span>
                    </div>
                </div>
            </NotAuthorized>
        </AuthorizeView>

        

        <nav class="flex-column">
            <div class="nav-item">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <i class="fas fa-home" aria-hidden="true"></i> <span class="nav-text">Inicio</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="proyectos">
                    <i class="fas fa-project-diagram" aria-hidden="true"></i> <span class="nav-text">Proyectos</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="contratos">
                    <i class="fas fa-file-signature" aria-hidden="true"></i> <span class="nav-text">Recursos Humanos</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="inventario">
                    <i class="fas fa-boxes" aria-hidden="true"></i> <span class="nav-text">Bodega</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="incidencias-ssma">
                    <i class="fas fa-exclamation-triangle" aria-hidden="true"></i> <span class="nav-text">Seguridad</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="control-calidad">
                    <i class="fas fa-check-circle" aria-hidden="true"></i> <span class="nav-text">Control de Calidad</span>
                </NavLink>
            </div>
            <div class="nav-item">
                <NavLink class="nav-link" href="oficina-tecnica">
                    <i class="fas fa-drafting-compass" aria-hidden="true"></i> <span class="nav-text">Oficina Técnica</span>
                </NavLink>
            </div>

            <div class="nav-separator"></div>

            <div class="nav-item">
                <a class="nav-link" href="Logout">
                    <i class="fas fa-sign-out-alt" aria-hidden="true"></i> <span class="nav-text">Cerrar sesión</span>
                </a>
            </div>
        </nav>
    </div>
    <div class="nav-footer">
        <div class="switch2">
            <label class="switch2">
                <input type="checkbox" @onchange="ToggleTheme" />
                <span class="slider"></span>
            </label>
        </div>
        <br/>
        <div role="button" aria-label="Toggle Navigation" class="nav-toggle-icon @(IsPinned ? "" : "is-active")" @onclick="ToggleNavMenu">
            <div id="bar1" class="bars"></div>
            <div id="bar2" class="bars"></div>
            <div id="bar3" class="bars"></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsPinned { get; set; }

    [Parameter]
    public EventCallback<bool> OnToggle { get; set; }

    private string firstName = "Cargando...";

    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = default!;

    // Agrega estas propiedades y métodos para manejar el estado del tema
    private bool isLightTheme;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var savedTheme = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "theme");
            isLightTheme = savedTheme == "light";
            await ApplyTheme(isLightTheme);
            StateHasChanged();
        }
    }

    private async Task ToggleTheme(ChangeEventArgs e)
    {
        isLightTheme = (bool)(e.Value ?? false);
        await ApplyTheme(isLightTheme);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "theme", isLightTheme ? "light" : "dark");
    }

    private async Task ApplyTheme(bool lightTheme)
    {
        if (lightTheme)
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.setAttribute", "data-theme", "light");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("document.documentElement.removeAttribute", "data-theme");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userManager = ServiceProvider.GetRequiredService<UserManager<Usuario>>();
            var appUser = await userManager.GetUserAsync(user);
            if (appUser != null)
            {
                firstName = appUser.Nombre;
            }
        }
    }

    private Task ToggleNavMenu()
    {
        return OnToggle.InvokeAsync(!IsPinned);
    }
}