@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="container">
    <h3 class="mb-4 text-center">Crear / Editar Proyecto</h3>

    <div class="card-style p-4 mb-4">
        <div class="form-group mb-3">
            <label for="projectSelector">Seleccionar Proyecto Existente:</label>
            <InputSelect TValue="int" id="projectSelector" class="form-select" @bind-Value="selectedProyectoId">
                <option value="0">-- Nuevo Proyecto --</option>
                @foreach (var p in proyectosExistentes)
                {
                    <option value="@p.ProyectoID">@p.CodigoObra - @p.NombreObra</option>
                }
            </InputSelect>
        </div>
    </div>

    <EditForm Model="@proyecto" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="card-style p-4 mb-4">
            <h5 class="mb-3">Datos de la Obra</h5>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="codigoObra">Código de Obra:</label>
                        <InputText id="codigoObra" class="form-control" @bind-Value="proyecto.CodigoObra" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombreObra">Nombre de la Obra:</label>
                        <InputText id="nombreObra" class="form-control" @bind-Value="proyecto.NombreObra" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="pais">País:</label>
                        <InputText id="pais" class="form-control" @bind-Value="proyecto.Pais" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="region">Región:</label>
                        <InputText id="region" class="form-control" @bind-Value="proyecto.Region" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="ciudad">Ciudad de la Obra:</label>
                        <InputText id="ciudad" class="form-control" @bind-Value="proyecto.Ciudad" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="fechaInicioProyecto">Fecha de Inicio:</label>
                        <InputDate id="fechaInicioProyecto" class="form-control" @bind-Value="proyecto.FechaInicioProyecto" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="fechaTerminoProyecto">Fecha de Término:</label>
                        <InputDate id="fechaTerminoProyecto" class="form-control" @bind-Value="proyecto.FechaTerminoProyecto" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="estado">Estado:</label>
                        <InputSelect id="estado" class="form-control" @bind-Value="proyecto.Estado">
                            <option value="">-- Seleccione --</option>
                            <option value="Activo">Activo</option>
                            <option value="En Pausa">En Pausa</option>
                            <option value="Completado">Completado</option>
                            <option value="Cancelado">Cancelado</option>
                        </InputSelect>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-style p-4 mb-4">
            <h5 class="mb-3">Datos de la Empresa Ejecutora</h5>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="nombreEmpresaEjecutora">Nombre:</label>
                        <InputText id="nombreEmpresaEjecutora" class="form-control" @bind-Value="proyecto.NombreEmpresaEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="idEmpresaEjecutora">ID:</label>
                        <InputText id="idEmpresaEjecutora" class="form-control" @bind-Value="proyecto.IdEmpresaEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="direccionEmpresaEjecutora">Dirección:</label>
                        <InputText id="direccionEmpresaEjecutora" class="form-control" @bind-Value="proyecto.DireccionEmpresaEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="ciudadEmpresaEjecutora">Ciudad:</label>
                        <InputText id="ciudadEmpresaEjecutora" class="form-control" @bind-Value="proyecto.CiudadEmpresaEjecutora" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="nombreRepresentanteLegalEjecutora">Rep. Legal:</label>
                        <InputText id="nombreRepresentanteLegalEjecutora" class="form-control" @bind-Value="proyecto.NombreRepresentanteLegalEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="idRepresentanteLegalEjecutora">ID Rep. Legal:</label>
                        <InputText id="idRepresentanteLegalEjecutora" class="form-control" @bind-Value="proyecto.IdRepresentanteLegalEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombreAdministradorObraEjecutora">Adm. Obra:</label>
                        <InputText id="nombreAdministradorObraEjecutora" class="form-control" @bind-Value="proyecto.NombreAdministradorObraEjecutora" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="logoEmpresaEjecutoraPath">Logo Ejecutora (URL/Path):</label>
                        <InputText id="logoEmpresaEjecutoraPath" class="form-control" @bind-Value="proyecto.LogoEmpresaEjecutoraPath" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card-style p-4 mb-4">
            <h5 class="mb-3">Datos de la Empresa Mandante</h5>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="nombreEmpresaMandante">Nombre:</label>
                        <InputText id="nombreEmpresaMandante" class="form-control" @bind-Value="proyecto.NombreEmpresaMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="idEmpresaMandante">ID:</label>
                        <InputText id="idEmpresaMandante" class="form-control" @bind-Value="proyecto.IdEmpresaMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="direccionEmpresaMandante">Dirección:</label>
                        <InputText id="direccionEmpresaMandante" class="form-control" @bind-Value="proyecto.DireccionEmpresaMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="ciudadEmpresaMandante">Ciudad:</label>
                        <InputText id="ciudadEmpresaMandante" class="form-control" @bind-Value="proyecto.CiudadEmpresaMandante" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group mb-3">
                        <label for="nombreRepresentanteLegalMandante">Rep. Legal:</label>
                        <InputText id="nombreRepresentanteLegalMandante" class="form-control" @bind-Value="proyecto.NombreRepresentanteLegalMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="idRepresentanteLegalMandante">ID Rep. Legal:</label>
                        <InputText id="idRepresentanteLegalMandante" class="form-control" @bind-Value="proyecto.IdRepresentanteLegalMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="nombreAdministradorObraMandante">Adm. Obra:</label>
                        <InputText id="nombreAdministradorObraMandante" class="form-control" @bind-Value="proyecto.NombreAdministradorObraMandante" />
                    </div>
                    <div class="form-group mb-3">
                        <label for="logoEmpresaMandantePath">Logo Mandante (URL/Path):</label>
                        <InputText id="logoEmpresaMandantePath" class="form-control" @bind-Value="proyecto.LogoEmpresaMandantePath" />
                    </div>
                </div>
            </div>
        </div>

        <div class="text-center mt-4">
            <button type="submit" class="btn btn-primary me-2"><span class="btn-content">@(isEditMode ? "Guardar Cambios" : "Crear Proyecto")</span></button>
            @if (isEditMode)
            {
                <button type="button" class="btn btn-danger me-2" @onclick="ConfirmDeleteProject"><span class="btn-content">Eliminar Proyecto</span></button>
            }
            <button type="button" class="btn btn-secondary" @onclick="NavigateToIndex"><span class="btn-content">Salir</span></button>
        </div>
    </EditForm>
</div>

@code {
    private Proyecto proyecto = new Proyecto();
    private List<Proyecto> proyectosExistentes = new List<Proyecto>();
    private bool isEditMode = false;

    private int _selectedProyectoId;
    private int selectedProyectoId
    {
        get => _selectedProyectoId;
        set
        {
            if (_selectedProyectoId != value)
            {
                _selectedProyectoId = value;
                _ = OnProjectSelected(value);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadExistingProjects();
    }

    private async Task LoadExistingProjects()
    {
        using var dbContext = DbFactory.CreateDbContext();
        proyectosExistentes = await dbContext.Proyectos.OrderBy(p => p.CodigoObra).ToListAsync();
    }

    private async Task LoadProject(int proyectoId)
    {
        using var dbContext = DbFactory.CreateDbContext();
        if (proyectoId == 0)
        {
            proyecto = new Proyecto();
            isEditMode = false;
        }
        else
        {
            var existingProject = await dbContext.Proyectos.FindAsync(proyectoId);
            if (existingProject != null)
            {
                proyecto = existingProject;
                isEditMode = true;
            }
            else
            {
                proyecto = new Proyecto();
                isEditMode = false;
            }
        }
        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        using var dbContext = DbFactory.CreateDbContext();
        bool isNew = !isEditMode;
        try
        {
            if (isEditMode)
            {
                var existing = await dbContext.Proyectos.AsNoTracking().FirstOrDefaultAsync(p => p.ProyectoID == proyecto.ProyectoID);
                if (existing == null) {
                    await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", "No se encontró el proyecto para actualizar.", "error");
                    return;
                }

                bool datesChanged = existing.FechaInicioProyecto != proyecto.FechaInicioProyecto || existing.FechaTerminoProyecto != proyecto.FechaTerminoProyecto;

                dbContext.Entry(proyecto).State = EntityState.Modified;

                if (datesChanged)
                {
                    var notification = new Notificacion
                    {
                        Mensaje = $"Las fechas del proyecto '{proyecto.NombreObra}' han sido modificadas.",
                        Fecha = DateTime.Now,
                        ProyectoId = proyecto.ProyectoID,
                        RoleName = "OficinaTecnica"
                    };
                    dbContext.Notificaciones.Add(notification);
                }

                await dbContext.SaveChangesAsync();
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Éxito", "Proyecto actualizado exitosamente.", "success");
            }
            else
            {
                if (await dbContext.Proyectos.AnyAsync(p => p.CodigoObra == proyecto.CodigoObra))
                {
                    await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", "Ya existe un proyecto con este Código de Obra.", "error");
                    return;
                }
                dbContext.Proyectos.Add(proyecto);
                await dbContext.SaveChangesAsync();

                var notification = new Notificacion
                {
                    Mensaje = $"Proyecto '{proyecto.NombreObra}' creado con el código '{proyecto.CodigoObra}'. Favor revisar fechas y contrastarlas con carta Gantt.",
                    Fecha = DateTime.Now,
                    ProyectoId = proyecto.ProyectoID,
                    RoleName = "OficinaTecnica"
                };
                dbContext.Notificaciones.Add(notification);
                await dbContext.SaveChangesAsync();

                await JSRuntime.InvokeVoidAsync("Swal.fire", "Éxito", "Proyecto creado exitosamente.", "success");
            }

            if (isNew)
            {
                NavigationManager.NavigateTo($"/proyectos/importar-presupuesto?ProyectoId={proyecto.ProyectoID}");
            }
            else
            {
                NavigationManager.NavigateTo("/proyectos", forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            var innerExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : ex.Message;
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", $"Ocurrió un error al guardar el proyecto: {innerExceptionMessage}", "error");
            Console.WriteLine($"Error saving project: {ex.Message}\nInner Exception: {innerExceptionMessage}\n{ex.StackTrace}");
        }
    }

    private async Task ConfirmDeleteProject()
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirmDelete");
        if (confirmed)
        {
            await DeleteProject();
        }
    }

    private async Task DeleteProject()
    {
        using var dbContext = DbFactory.CreateDbContext();
        try
        {
            var projectToDelete = await dbContext.Proyectos.FindAsync(proyecto.ProyectoID);
            if (projectToDelete != null)
            {
                dbContext.Proyectos.Remove(projectToDelete);
                await dbContext.SaveChangesAsync();
                await JSRuntime.InvokeVoidAsync("Swal.fire", "¡Eliminado!", "El proyecto ha sido eliminado.", "success");
                NavigationManager.NavigateTo("/proyectos", forceLoad: true);
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", "No se pudo encontrar el proyecto para eliminar.", "error");
            }
        }
        catch (Exception ex)
        {
            var innerExceptionMessage = ex.InnerException != null ? ex.InnerException.Message : ex.Message;
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Error", $"Ocurrió un error al eliminar el proyecto: {innerExceptionMessage}", "error");
            Console.WriteLine($"Error deleting project: {ex.Message}\nInner Exception: {innerExceptionMessage}\n{ex.StackTrace}");
        }
    }

    private async Task ClearFormAndReload()
    {
        selectedProyectoId = 0;
        await LoadExistingProjects();
        StateHasChanged();
    }

    private async Task OnProjectSelected(int id)
    {
        await LoadProject(id);
    }

    private void NavigateToIndex()
    {
        NavigationManager.NavigateTo("/proyectos");
    }
}
