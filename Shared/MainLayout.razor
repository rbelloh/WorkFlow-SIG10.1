@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using WorkFlow_SIG10._1.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SignInManager<Usuario> SignInManager
@implements IDisposable

<div class="app-container @(isNavPinned ? "expanded" : "")">
    <div class="nav-wrapper">
        <NavMenu IsPinned="isNavPinned" OnToggle="HandlePinToggle" />
    </div>

    <main class="app-main">
        <article class="app-content px-4">
            @Body
        </article>
    </main>
    <BackToTopButton />
</div>

@code {
    private bool isNavPinned = true; // 1. Start expanded
    private DotNetObjectReference<MainLayout> objRef = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("initializeInactivityDetection", objRef, 10);

            // 2. Auto-collapse after 2 seconds on the very first render
            await Task.Delay(2000);
            isNavPinned = false;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task LogoutUser()
    {
        await SignInManager.SignOutAsync();
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    private void HandlePinToggle(bool newPinnedState)
    {
        isNavPinned = newPinnedState;
    }

    

    public void Dispose()
    {
        JSRuntime.InvokeVoidAsync("clearInactivityDetection", objRef);
        objRef?.Dispose();
    }
}
