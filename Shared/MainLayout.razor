@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using WorkFlow_SIG10._1.Models
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject SignInManager<Usuario> SignInManager
@implements IDisposable

<div class="app-container @(isExpanded ? "expanded" : "")">
    <div class="nav-wrapper" @onmouseenter="HandleMouseEnter" @onmouseleave="HandleMouseLeave">
        <NavMenu IsPinned="isNavPinned" OnToggle="HandlePinToggle" />
    </div>

    <main class="app-main">
        <article class="app-content px-4">
            @Body
        </article>
    </main>
    <button @onclick="ScrollToTop" class="scroll-to-top-btn" id="scrollToTopBtn" title="Ir arriba">
        <i class="fas fa-arrow-up"></i>
    </button>
</div>

@code {
    private bool isNavPinned = false;
    private bool isMouseOver = false;
    private DotNetObjectReference<MainLayout> objRef;

    private bool isExpanded => isNavPinned || isMouseOver;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            // Initialize inactivity detection with 10 minutes timeout
            await JSRuntime.InvokeVoidAsync("initializeInactivityDetection", objRef, 10);
        }
    }

    [JSInvokable]
    public async Task LogoutUser()
    {
        // Perform logout logic
        await SignInManager.SignOutAsync();
        await AuthenticationStateProvider.GetAuthenticationStateAsync(); // Refresh auth state
        NavigationManager.NavigateTo("/login", forceLoad: true); // Redirect to login page
    }

    private void HandlePinToggle(bool newPinnedState)
    {
        isNavPinned = newPinnedState;
    }

    private void HandleMouseEnter()
    {
        isMouseOver = true;
    }

    private void HandleMouseLeave()
    {
        isMouseOver = false;
    }

    private async Task ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    public void Dispose()
    {
        // Clear inactivity detection when the component is disposed
        JSRuntime.InvokeVoidAsync("clearInactivityDetection", objRef);
        objRef?.Dispose();
    }
}