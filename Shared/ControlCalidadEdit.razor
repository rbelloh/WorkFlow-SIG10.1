@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@using Models = WorkFlow_SIG10._1.Models;

<EditForm Model="@controlCalidad" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="proyecto">Proyecto:</label>
        <InputSelect id="proyecto" class="form-control" @bind-Value="controlCalidad.ProyectoID">
            <option value="0">-- Seleccione un Proyecto --</option>
            @foreach (var proyecto in proyectos)
            {
                <option value="@proyecto.ProyectoID">@proyecto.NombreObra</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="descripcion">Descripción Inspección:</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="controlCalidad.DescripcionInspeccion" />
    </div>

    <div class="form-group">
        <label for="resultado">Resultado:</label>
        <InputText id="resultado" class="form-control" @bind-Value="controlCalidad.Resultado" />
    </div>

    <div class="form-group">
        <label for="fecha">Fecha:</label>
        <InputDate id="fecha" class="form-control" @bind-Value="controlCalidad.Fecha" />
    </div>

    <button type="submit" class="btn btn-primary"><span class="btn-content">Guardar</span></button>
</EditForm>

@code {
    [Parameter] public Models.ControlCalidad controlCalidad { get; set; } = new();
    [Parameter] public EventCallback<Models.ControlCalidad> OnValidSubmit { get; set; }

    private List<Models.Proyecto> proyectos = new();

    protected override async Task OnInitializedAsync()
    {
        proyectos = await DbContext.Proyectos.ToListAsync();
    }

    private async Task HandleValidSubmit()
    {
        await OnValidSubmit.InvokeAsync(controlCalidad);
    }
}
