@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using WorkFlow_SIG10._1.Data
@using WorkFlow_SIG10._1.Models

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<div class="notification-bell-container">
    <div class="bell-icon" @onclick="ToggleDropdown">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M12 22C13.1 22 14 21.1 14 20H10C10 21.1 10.9 22 12 22ZM18 16V11C18 7.93 16.37 5.36 13.5 4.68V4C13.5 3.17 12.83 2.5 12 2.5C11.17 2.5 10.5 3.17 10.5 4V4.68C7.64 5.36 6 7.92 6 11V16L4 18V19H20V18L18 16Z" fill="currentColor"/>
        </svg>
        @if (unreadCount > 0)
        {
            <span class="unread-count">@unreadCount</span>
        }
    </div>

    @if (showDropdown)
    {
        <div class="notifications-dropdown">
            <div class="dropdown-header">
                <h3>Notificaciones</h3>
            </div>
            <div class="notifications-list">
                @if (notifications.Any())
                {
                    @foreach (var notification in notifications)
                    {
                        <NotificationCard Notificacion="notification" OnMarkAsRead="HandleMarkAsRead" />
                    }
                }
                else
                {
                    <div class="no-notifications">
                        <p>No hay notificaciones nuevas.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<Notificacion> notifications = new List<Notificacion>();
    private int unreadCount = 0;
    private bool showDropdown = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            await LoadNotificationsForUser(user);
        }
    }

    private async Task LoadNotificationsForUser(ClaimsPrincipal user)
    {
        var userIdString = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (userIdString is null || !int.TryParse(userIdString, out var userIdInt))
        {
            // Si el ID no es un entero válido, no podemos continuar.
            return;
        }

        var userRoles = user.FindAll(ClaimTypes.Role).Select(c => c.Value).ToList();

        notifications = await DbContext.Notificaciones
            .Where(n => 
                (n.UsuarioId.HasValue && n.UsuarioId.Value == userIdInt) || 
                (n.RoleName != null && userRoles.Contains(n.RoleName)))
            .OrderByDescending(n => n.Fecha)
            .Distinct()
            .ToListAsync();
        
        unreadCount = notifications.Count(n => !n.Leida);
        StateHasChanged();
    }

    private void ToggleDropdown()
    {
        showDropdown = !showDropdown;
    }

    private async Task HandleMarkAsRead(Notificacion notification)
    {
        var notificationToUpdate = await DbContext.Notificaciones.FindAsync(notification.NotificacionId);
        if (notificationToUpdate != null)
        {
            notificationToUpdate.Leida = true;
            await DbContext.SaveChangesAsync();
            
            // Actualizar solo el estado local para una UI más rápida
            var localNotification = notifications.FirstOrDefault(n => n.NotificacionId == notification.NotificacionId);
            if(localNotification != null) 
            {
                localNotification.Leida = true;
                unreadCount = notifications.Count(n => !n.Leida);
                StateHasChanged();
            }
        }
    }
}
